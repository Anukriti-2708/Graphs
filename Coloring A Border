class Solution {
    int[][]dir = {{0,1},{1,0},{0,-1},{-1,0}};
    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        
        dfs(grid, row, col, grid[row][col]);
        for(int i = 0;i< grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]<0)
                    grid[i][j]= color;
            }
        }
        return grid;
    }
    
    public void dfs(int[][] grid, int row, int col, int clr){
        grid[row][col]=-clr;
        int count = 0;
        for(int i = 0;i<4;i++ ){
            int rowdash = row + dir[i][0];
            int coldash = col + dir[i][1];
            
            if(rowdash >= grid.length || coldash >= grid[0].length || rowdash < 0
               || coldash <0 || Math.abs(grid[rowdash][coldash])!=clr){
                continue;}
            count++;
            if(grid[rowdash][coldash] == clr){
                dfs(grid,rowdash,coldash,clr);
            }
        }
        
        if (count==4){
            grid[row][col]=clr;
        }
    }
}
