class Solution {
    int max = 0;
    public int maxAreaOfIsland(int[][] grid) {
          int fin = 0;
        boolean [][]visited = new boolean[grid.length][grid[0].length];
        for(int i =0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
               
                if(grid[i][j]==1 && visited[i][j]==false){
                dfs(grid,i,j,visited);
                fin = Math.max(max, fin);
                max=0;
                }
            }
        }
       return fin; 
    }
    
    
    int[][] dir = {{1,0},{0,1},{-1,0},{0,-1}};
    public void dfs(int[][] grid, int row,int col, boolean[][]visited){
        visited[row][col] = true;
        max++;
        
        for(int i=0;i<dir.length;i++){
            int rowdash = row + dir[i][0];
            int coldash = col + dir[i][1];
            
            if(rowdash<0 || coldash<0 || rowdash >= grid.length || coldash>=grid[0].length || grid[rowdash][coldash] == 0 || visited[rowdash][coldash]==true){
                continue;
            }
           
                dfs(grid,rowdash,coldash,visited);
            
        }
    }
}
